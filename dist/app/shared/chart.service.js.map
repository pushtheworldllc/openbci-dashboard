{"version":3,"file":"chart.service.js","sourceRoot":"","sources":["chart.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAG3C;IAEE;IAAe,CAAC;IAEhB,yCAAkB,GAAlB,UAAoB,SAAmB;QAAnB,yBAAmB,GAAnB,cAAmB;QACrC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YACnB,UAAU,EAAE,IAAI;YAChB,SAAS,EAAE,KAAK;YAChB,cAAc,EAAE,EAAE;YAClB,kBAAkB,EAAE,CAAC;YACrB,QAAQ,EAAE,KAAK;YACf,cAAc,EAAE,CAAC;YACjB,mBAAmB,EAAE,CAAC;YACtB,WAAW,EAAE,KAAK;YAClB,aAAa,EAAE,IAAI;YACnB,eAAe,EAAE,CAAC,CAAC;YACnB,cAAc,EAAE,CAAC;YACjB,UAAU,EAAE,CAAC;YACb,aAAa,EAAE,KAAK;YACpB,eAAe,EAAE,CAAC;YAClB,cAAc,EAAE,CAAC;SAClB,EAAE,SAAS,CAAC,CAAC;IAChB,CAAC;IAED,+CAAwB,GAAxB,UAA0B,SAAmB;QAAnB,yBAAmB,GAAnB,cAAmB;QAC3C,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YACjB,aAAa,EAAE,IAAI;YACnB,IAAI,EAAE;gBACF,SAAS,EAAE,SAAS;gBACpB,WAAW,EAAE,iBAAiB;gBAC9B,UAAU,EAAE,KAAK;gBACjB,gBAAgB,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM;gBAC3C,aAAa,EAAE,IAAI;aACtB;YACD,MAAM,EAAE;gBACJ,QAAQ,EAAE,IAAI;aACjB;YACD,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,MAAM,GAAG,CAAC;YACvC,QAAQ,EAAE,CAAC;SACd,EAAE,SAAS,CAAC,CAAC;IAChB,CAAC;IAED,kCAAW,GAAX;QACE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,IAAI,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,EAAlB,CAAkB,CAAC,CAAC;IACtE,CAAC;IAED,gCAAS,GAAT;QACE,MAAM,CAAC;YACL,EAAE,WAAW,EAAE,qBAAqB,EAAE,SAAS,EAAE,qBAAqB,EAAE;YACxE,EAAE,WAAW,EAAE,qBAAqB,EAAE,SAAS,EAAE,qBAAqB,EAAE;YACxE,EAAE,WAAW,EAAE,oBAAoB,EAAE,SAAS,EAAE,oBAAoB,EAAE;YACtE,EAAE,WAAW,EAAE,qBAAqB,EAAE,SAAS,EAAE,qBAAqB,EAAE;YACxE,EAAE,WAAW,EAAE,qBAAqB,EAAE,SAAS,EAAE,qBAAqB,EAAE;YACxE,EAAE,WAAW,EAAE,qBAAqB,EAAE,SAAS,EAAE,qBAAqB,EAAE;YACxE,EAAE,WAAW,EAAE,qBAAqB,EAAE,SAAS,EAAE,qBAAqB,EAAE;YACxE,EAAE,WAAW,EAAE,kBAAkB,EAAE,SAAS,EAAE,kBAAkB,EAAE;SACnE,CAAC;IACJ,CAAC;IAED,sCAAe,GAAf,UAAiB,KAAY;QAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,KAAK,KAAK,CAAC,EAAX,CAAW,CAAC,CAAC;IACxD,CAAC;IA9DH;QAAC,iBAAU,EAAE;;oBAAA;IAgEb,mBAAC;AAAD,CAAC,AA/DD,IA+DC;AA/DY,oBAAY,eA+DxB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ChartService {\n\n  constructor() {}\n  \n  getChartJSDefaults (overrides: any = {}): any {\n    return Object.assign({\n      responsive: true,\n      animation: false,\n      animationSteps: 15,\n      datasetStrokeWidth: 1,\n      pointDot: false,\n      pointDotRadius: 1,\n      pointDotStrokeWidth: 0,\n      datasetFill: false,\n      scaleOverride: true,\n      scaleStartValue: -2,\n      scaleStepWidth: 1,\n      scaleSteps: 6,\n      barShowStroke: false,\n      barValueSpacing: 1,\n      barStrokeWidth: 1\n    }, overrides);\n  }\n  \n  getChartSmoothieDefaults (overrides: any = {}): any {\n    return Object.assign({\n        millisPerLine: 3000,\n        grid: {\n            fillStyle: '#333333',\n            strokeStyle: 'rgba(0,0,0,0.1)',\n            sharpLines: false,\n            verticalSections: this.getChannels().length,\n            borderVisible: true\n        },\n        labels: {\n            disabled: true\n        },\n        maxValue: this.getChannels().length * 2,\n        minValue: 0\n    }, overrides);\n  }\n  \n  getChannels (): Array<string> {\n    return Array(8).fill('CH').map((item, index) => item + (index + 1));\n  }\n  \n  getColors (): Array<any> {\n    return [\n      { strokeColor: 'rgba(112,185,252,1)', fillColor: 'rgba(112,185,252,1)' },\n      { strokeColor: 'rgba(116,150,161,1)', fillColor: 'rgba(116,150,161,1)' },\n      { strokeColor: 'rgba(162,86,178,1)', fillColor: 'rgba(162,86,178,1)' },\n      { strokeColor: 'rgba(144,132,246,1)', fillColor: 'rgba(144,132,246,1)' },\n      { strokeColor: 'rgba(138,219,229,1)', fillColor: 'rgba(138,219,229,1)' },\n      { strokeColor: 'rgba(232,223,133,1)', fillColor: 'rgba(232,223,133,1)' },\n      { strokeColor: 'rgba(148,159,177,1)', fillColor: 'rgba(148,159,177,1)' },\n      { strokeColor: 'rgba(77,83,96,1)', fillColor: 'rgba(77,83,96,1)' }\n    ]; \n  }\n  \n  getColorByIndex (index:number): Array<any> {\n    return this.getColors().filter((c, i) => index === i);\n  }\n\n}\n"]}