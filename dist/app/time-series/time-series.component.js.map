{"version":3,"file":"time-series.component.js","sourceRoot":"","sources":["time-series.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { SmoothieChart, TimeSeries } from 'smoothie';\nimport { ChartService } from '../shared';\nimport * as io from 'socket.io-client';\nimport { Constants } from '../shared/constants';\n\n@Component({\n  moduleId: module.id,\n  selector: 'bci-time-series',\n  templateUrl: 'time-series.component.html',\n  styleUrls: ['time-series.component.css'],\n  providers: [ChartService, Constants]\n})\n\nexport class TimeSeriesComponent implements OnInit {\n\n  socket: any;\n  constructor(private view: ElementRef, \n              private chartService: ChartService, \n              private constants: Constants) {\n    this.socket = io(constants.socket.url);\n    this.chartService = chartService;\n  }\n  \n  private options = this.chartService.getChartSmoothieDefaults();\n  \n  private timeSeries = new SmoothieChart(this.options);\n  private amplitudes = [];\n  private timeline = [];\n  private lines = Array(8).fill(0).map(() => new TimeSeries());\n  private channels = this.chartService.getChannels();\n  private colors = this.chartService.getColors();\n  \n  ngOnInit() {\n    this.addTimeSeriesLines();\n        \n    this.socket.on(this.constants.socket.events.time, (data) => {\n      this.amplitudes = data.amplitudes;\n      this.timeline = data.timeline;\n      this.appendTimeSeriesLines(data.data);\n    });\n  }\n  \n  ngOnDestroy () {\n    this.socket.removeListener(this.constants.socket.events.time);\n  } \n  \n  ngAfterViewInit () {\n    this.timeSeries.streamTo(this.view.nativeElement.querySelector('canvas'), 40);\n  }\n  \n  addTimeSeriesLines () {\n    this.lines.forEach((line, index) => {\n        this.timeSeries.addTimeSeries(line, { \n          strokeStyle: this.colors[index].strokeColor \n        });\n    });\n  }\n  \n  appendTimeSeriesLines (data) {\n    this.lines.forEach((line, index) => {\n          data[index].forEach((amplitude) => {\n              line.append(new Date().getTime(), amplitude);\n          });\n      });\n  }\n\n}\n"]}